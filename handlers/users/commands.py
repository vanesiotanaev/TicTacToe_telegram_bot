from loader import dp, bot, db
from aiogram import types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from keyboards import process_keyboard, game_start_inline_keyboard, tictactoe_inline_keyboard
import time
import view
import model
from classes import Tictactoe

@dp.message_handler(commands='start') 
async def start(message: types.Message):
    await message.answer(text = f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üññ' + '\n–¢—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ –ì–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.' + '\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ...', 
    reply_markup = game_start_inline_keyboard)

@dp.callback_query_handler(text = ['–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', '–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞'])
async def main_menu(callback: types.CallbackQuery):
    await bot.edit_message_text(text = f'–ü—Ä–∏–≤–µ—Ç, {callback.from_user.first_name}! üññ' + '\n–¢—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ –ì–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.' + '\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ...', 
    chat_id=callback.message.chat.id, message_id=callback.message.message_id, 
    reply_markup = game_start_inline_keyboard)

@dp.callback_query_handler(text = ['–ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏'])
async def tictactoe(callback: types.CallbackQuery):
    if callback.data == "–ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏":
        new_game = Tictactoe(callback.from_user.id, model.new_game_dict(), list(model.new_game_dict().values()), model.first_move())
        
        db.add_tictactoe_session(db.get_tictactoe_sessions_count()+1, new_game.user_id, model.dict_values_to_string(new_game.table_dict),
        model.list_to_string(new_game.possible_moves), new_game.first_move)

        await bot.edit_message_text(text = '–ò–≥—Ä–∞ "–ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏"!', chat_id=callback.message.chat.id, message_id=callback.message.message_id, 
        reply_markup = tictactoe_inline_keyboard)
        time.sleep(1)

        user_current_session_id = db.tictactoe_sessions_by_user_id(new_game.user_id)[-1][0]

        if db.tictactoe_first_move(user_current_session_id)[0][0] == 1:
            print(user_current_session_id)

            await bot.edit_message_text(text = f'{callback.from_user.first_name}, —Ç—ã —Ö–æ–¥–∏—à—å –ø–µ—Ä–≤—ã–º! üëà',
            chat_id=callback.message.chat.id, message_id=callback.message.message_id, 
            reply_markup = tictactoe_inline_keyboard)       
        else:
            await bot.edit_message_text(text = f'–ù–∞—á–∏–Ω–∞–µ—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä! ü§ñ',
            chat_id=callback.message.chat.id, message_id=callback.message.message_id, 
            reply_markup = tictactoe_inline_keyboard)

            user_current_session_id = db.tictactoe_sessions_by_user_id(callback.from_user.id)[-1][0]
            user_current_table_dict = model.string_to_dict(db.tictactoe_table_dict(user_current_session_id)[0][0])
            user_current_possible_moves = model.string_to_list(db.tictactoe_possible_moves(user_current_session_id)[0][0])

            time.sleep(1)
            comp = model.comp_logic(user_current_table_dict, user_current_possible_moves)
            user_current_table_dict[int(comp)] = 'O'
            user_current_possible_moves.remove(comp)

            to_be_converted_user = user_current_table_dict
            list_2D = model.dict_to_2D_list(to_be_converted_user)
            small_current = model.keyboard_change(list_2D, process_keyboard)
            current_keyboard = InlineKeyboardMarkup(inline_keyboard=small_current)

            await bot.edit_message_text(text = f'{callback.from_user.first_name}, —Ç–≤–æ–π —Ö–æ–¥! üëà',
            chat_id=callback.message.chat.id, message_id=callback.message.message_id, 
            reply_markup = current_keyboard)
            
            db.update_tictactoe_session(user_current_session_id,
            model.dict_values_to_string(user_current_table_dict),
            model.list_to_string(user_current_possible_moves))

@dp.callback_query_handler()
async def tictactoe_proccess(callback: types.CallbackQuery):

    user_current_session_id = db.tictactoe_sessions_by_user_id(callback.from_user.id)[-1][0]
    user_current_table_dict = model.string_to_dict(db.tictactoe_table_dict(user_current_session_id)[0][0])
    user_current_possible_moves = model.string_to_list(db.tictactoe_possible_moves(user_current_session_id)[0][0])

    to_be_converted_user = user_current_table_dict
    list_2D = model.dict_to_2D_list(to_be_converted_user)
    small_current = model.keyboard_change(list_2D, process_keyboard)
    current_keyboard = InlineKeyboardMarkup(inline_keyboard=small_current)

    if model.check_win(user_current_table_dict) or model.check_draw(user_current_possible_moves):
                await bot.edit_message_text(text = f'–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! ‚õî',
                chat_id=callback.message.chat.id, message_id=callback.message.message_id, 
                reply_markup = current_keyboard)
    else:                
        move = callback.data
        if model.check_win(user_current_table_dict) or model.check_draw(user_current_possible_moves):
            await bot.edit_message_text(text = f'–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! ‚õî',
            chat_id=callback.message.chat.id, message_id=callback.message.message_id, 
            reply_markup = current_keyboard)
                
        if not move in user_current_possible_moves:
            await bot.edit_message_text(text = f'–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞! ü§å',
            chat_id=callback.message.chat.id, message_id=callback.message.message_id, 
            reply_markup = current_keyboard)
        else:
            user_current_table_dict[int(move)] = 'X'
            user_current_possible_moves.remove(move)
            
            db.update_tictactoe_session(user_current_session_id,
            model.dict_values_to_string(user_current_table_dict),
            model.list_to_string(user_current_possible_moves))

            user_current_session_id = db.tictactoe_sessions_by_user_id(callback.from_user.id)[-1][0]
            user_current_table_dict = model.string_to_dict(db.tictactoe_table_dict(user_current_session_id)[0][0])
            user_current_possible_moves = model.string_to_list(db.tictactoe_possible_moves(user_current_session_id)[0][0])
                    
            to_be_converted_user = user_current_table_dict
            list_2D = model.dict_to_2D_list(to_be_converted_user)
            small_current = model.keyboard_change(list_2D, process_keyboard)
            current_keyboard = InlineKeyboardMarkup(inline_keyboard=small_current)
                
            if model.check_win(user_current_table_dict):
                await bot.edit_message_text(text = f'–£—Ä–∞! –ü–æ–±–µ–¥–∞!!! üéâ',
                chat_id=callback.message.chat.id, message_id=callback.message.message_id, 
                reply_markup = current_keyboard)
            elif model.check_draw(user_current_possible_moves):
                await bot.edit_message_text(text = '–ù–∏—á—å—è! ü§ù', 
                chat_id=callback.message.chat.id, message_id=callback.message.message_id, 
                reply_markup = current_keyboard)
            else:
                await bot.edit_message_text(text = f'–•–æ–¥ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞! ü§ñ',
                chat_id=callback.message.chat.id, message_id=callback.message.message_id, 
                reply_markup = current_keyboard)
                time.sleep(1)
                comp = model.comp_logic(user_current_table_dict, user_current_possible_moves)
                user_current_table_dict[int(comp)] = 'O'
                user_current_possible_moves.remove(comp)

                db.update_tictactoe_session(user_current_session_id,
                model.dict_values_to_string(user_current_table_dict),
                model.list_to_string(user_current_possible_moves))

                to_be_converted_user = user_current_table_dict
                list_2D = model.dict_to_2D_list(to_be_converted_user)
                small_current = model.keyboard_change(list_2D, process_keyboard)
                current_keyboard = InlineKeyboardMarkup(inline_keyboard=small_current)

                if model.check_win(user_current_table_dict):
                    await bot.edit_message_text(text = '–ü–æ–±–µ–¥a –∫–æ–º–ø—å—é—Ç–µ—Ä–∞! ü§ñ',
                    chat_id=callback.message.chat.id, message_id=callback.message.message_id, 
                    reply_markup = current_keyboard)
                elif model.check_draw(user_current_possible_moves):
                    await bot.edit_message_text(text = '–ù–∏—á—å—è! ü§ù', 
                    chat_id=callback.message.chat.id, message_id=callback.message.message_id, 
                    reply_markup = current_keyboard)
                else:
                    await bot.edit_message_text(text = f'{callback.from_user.first_name}, —Ç–≤–æ–π —Ö–æ–¥! üëà',
                    chat_id=callback.message.chat.id, message_id=callback.message.message_id, 
                    reply_markup = current_keyboard)

# @dp.message_handler(text = ['–ö–æ–Ω—Ñ–µ—Ç—ã'])
# @dp.message_handler(commands='candies')
# async def candies_start(message: types.Message):
#     candies = 150
#     first_move = model.first_move()
#     model.create_candies_file(message.from_user.id, candies, first_move)
#     await message.answer(text = f'–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã "–ö–æ–Ω—Ñ–µ—Ç—ã":\n\n–ù–∞ —Å—Ç–æ–ª–µ –ª–µ–∂–∏—Ç 150 –∫–æ–Ω—Ñ–µ—Ç. –ò–≥—Ä–æ–∫ –∏ –∫–æ–º–ø—å—é—Ç–µ—Ä –ø–æ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–±–∏—Ä–∞—é—Ç –∫–æ–Ω—Ñ–µ—Ç—ã —Å–µ–±–µ. –ó–∞ –æ–¥–∏–Ω —Ö–æ–¥ –º–æ–∂–Ω–æ –∑–∞–±—Ä–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 1 –∏ –Ω–µ –±–æ–ª–µ–µ 28 –∫–æ–Ω—Ñ–µ—Ç. –í—ã–∏–≥—Ä—ã–≤–∞–µ—Ç —Ç–æ—Ç, –∫—Ç–æ —Å–¥–µ–ª–∞–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ö–æ–¥ –∏ –∑–∞–±—Ä–∞–ª –≤—Å–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–æ–Ω—Ñ–µ—Ç—ã. –£–¥–∞—á–∏!')
#     await message.answer(text = f"–ò—Ç–∞–∫, –µ—Å—Ç—å {candies} –∫–æ–Ω—Ñ–µ—Ç.")
#     if first_move == 0:
#         recommended = candies % 29
#         if not recommended == 0:
#             await message.answer(text = (f"–°–∫–æ–ª—å–∫–æ –∫–æ–Ω—Ñ–µ—Ç —Ö–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–∞—Ç—å (1-28)? –ú–æ–∂–µ—Ç –±—ã—Ç—å, {recommended}?"))
#         else:
#             await message.answer(text = (f"–°–∫–æ–ª—å–∫–æ –∫–æ–Ω—Ñ–µ—Ç —Ö–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–∞—Ç—å (1-28)? "))
#     else:
#         candies = model.candies_logic(candies)
#         model.create_candies_file(message.from_user.id, candies, first_move)
#         await message.answer(text = (f"–ü–æ—Å–ª–µ —Ö–æ–¥–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ –æ—Å—Ç–∞–ª–æ—Å—å {candies} –∫–æ–Ω—Ñ–µ—Ç."))
#         recommended = candies % 29
#         if not recommended == 0:
#             await message.answer(text = (f"–°–∫–æ–ª—å–∫–æ –∫–æ–Ω—Ñ–µ—Ç —Ö–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–∞—Ç—å (1-28)? –ú–æ–∂–µ—Ç –±—ã—Ç—å, {recommended}?"))
#         else:
#             await message.answer(text = (f"–°–∫–æ–ª—å–∫–æ –∫–æ–Ω—Ñ–µ—Ç —Ö–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–∞—Ç—å (1-28)? "))


#     if model.what_game(message.from_user.id) == 'candies\n':
#         candies = int(model.get_candies_quantitiy(message.from_user.id))
#         if not message.text.isdigit() or int(message.text) > 28 or int(message.text) < 1 or int(message.text) > candies:
#             await message.answer(text = (f"–í—ã –≤–≤–µ–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ!"))
#         else:
#             candies = int(model.get_candies_quantitiy(message.from_user.id))
#             user = int(message.text)
#             candies -= user
#             if candies == 0:
#                 await message.answer(text = (f"{message.from_user.first_name} –ø–æ–±–µ–¥–∏–ª(a)! –û—Å—Ç–∞–ª–æ—Å—å {candies} –∫–æ–Ω—Ñ–µ—Ç!"))
#             else:
#                 await message.answer(text = (f"{message.from_user.first_name} –∑–∞–±—Ä–∞–ª(a) {user} –∫–æ–Ω—Ñ–µ—Ç! –û—Å—Ç–∞–ª–æ—Å—å {candies}!"))
#                 model.create_candies_file(message.from_user.id, candies, '1')
#                 candies = model.candies_logic(candies)
#                 model.create_candies_file(message.from_user.id, candies, '1')
#                 await message.answer(text = (f"–ü–æ—Å–ª–µ —Ö–æ–¥–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ –æ—Å—Ç–∞–ª–æ—Å—å {candies} –∫–æ–Ω—Ñ–µ—Ç."))
#                 if candies == 0:
#                     await message.answer(text = (f"–ü–æ–±–µ–¥–∏–ª –∫–æ–º–ø—å—é—Ç–µ—Ä!"))
#                 else:
#                     recommended = candies % 29
#                     if not recommended == 0:
#                         await message.answer(text = (f"–°–∫–æ–ª—å–∫–æ –∫–æ–Ω—Ñ–µ—Ç —Ö–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–∞—Ç—å (1-28)? –ú–æ–∂–µ—Ç –±—ã—Ç—å, {recommended}?"))
#                     else:
#                         await message.answer(text = (f"–°–∫–æ–ª—å–∫–æ –∫–æ–Ω—Ñ–µ—Ç —Ö–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–∞—Ç—å (1-28)?"))
            